// Generated by view binder compiler. Do not edit!
package dji.v5.ux.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.constraintlayout.widget.Barrier;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.mikepenz.iconics.view.IconicsImageView;
import dji.v5.ux.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UxsdkCellTextDescLayoutBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  @NonNull
  public final IconicsImageView arrow;

  @NonNull
  public final TextView content;

  @NonNull
  public final ImageView icon;

  @NonNull
  public final ImageView infoIv;

  @NonNull
  public final TextView subhead;

  @NonNull
  public final TextView summary;

  @NonNull
  public final TextView title;

  @NonNull
  public final Barrier topBarrier;

  private UxsdkCellTextDescLayoutBinding(@NonNull View rootView, @NonNull IconicsImageView arrow,
      @NonNull TextView content, @NonNull ImageView icon, @NonNull ImageView infoIv,
      @NonNull TextView subhead, @NonNull TextView summary, @NonNull TextView title,
      @NonNull Barrier topBarrier) {
    this.rootView = rootView;
    this.arrow = arrow;
    this.content = content;
    this.icon = icon;
    this.infoIv = infoIv;
    this.subhead = subhead;
    this.summary = summary;
    this.title = title;
    this.topBarrier = topBarrier;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static UxsdkCellTextDescLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @NonNull ViewGroup parent) {
    if (parent == null) {
      throw new NullPointerException("parent");
    }
    inflater.inflate(R.layout.uxsdk_cell_text_desc_layout, parent);
    return bind(parent);
  }

  @NonNull
  public static UxsdkCellTextDescLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.arrow;
      IconicsImageView arrow = ViewBindings.findChildViewById(rootView, id);
      if (arrow == null) {
        break missingId;
      }

      id = R.id.content;
      TextView content = ViewBindings.findChildViewById(rootView, id);
      if (content == null) {
        break missingId;
      }

      id = R.id.icon;
      ImageView icon = ViewBindings.findChildViewById(rootView, id);
      if (icon == null) {
        break missingId;
      }

      id = R.id.info_iv;
      ImageView infoIv = ViewBindings.findChildViewById(rootView, id);
      if (infoIv == null) {
        break missingId;
      }

      id = R.id.subhead;
      TextView subhead = ViewBindings.findChildViewById(rootView, id);
      if (subhead == null) {
        break missingId;
      }

      id = R.id.summary;
      TextView summary = ViewBindings.findChildViewById(rootView, id);
      if (summary == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.top_barrier;
      Barrier topBarrier = ViewBindings.findChildViewById(rootView, id);
      if (topBarrier == null) {
        break missingId;
      }

      return new UxsdkCellTextDescLayoutBinding(rootView, arrow, content, icon, infoIv, subhead,
          summary, title, topBarrier);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
