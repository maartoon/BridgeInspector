// Generated by view binder compiler. Do not edit!
package dji.v5.ux.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.constraintlayout.widget.Group;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import dji.v5.ux.R;
import dji.v5.ux.core.ui.HorizontalSeekBar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UxsdkWidgetSimulatorControlBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  @NonNull
  public final View attitudeSectionFooter;

  @NonNull
  public final Group constraintGroupAircraftState;

  @NonNull
  public final Group constraintGroupAttitude;

  @NonNull
  public final Group constraintGroupButtons;

  @NonNull
  public final Group constraintGroupRealWorld;

  @NonNull
  public final Group constraintGroupWind;

  @NonNull
  public final EditText editTextSimulatorLat;

  @NonNull
  public final EditText editTextSimulatorLng;

  @NonNull
  public final View locationSectionFooter;

  @NonNull
  public final HorizontalSeekBar seekBarFrequency;

  @NonNull
  public final HorizontalSeekBar seekBarSatelliteCount;

  @NonNull
  public final HorizontalSeekBar seekBarWindSpeedX;

  @NonNull
  public final HorizontalSeekBar seekBarWindSpeedY;

  @NonNull
  public final HorizontalSeekBar seekBarWindSpeedZ;

  @NonNull
  public final View statusSectionFooter;

  @NonNull
  public final Switch switchSimulator;

  @NonNull
  public final TextView textviewAttitudeSectionHeader;

  @NonNull
  public final TextView textviewLoadPreset;

  @NonNull
  public final TextView textviewLocationSectionHeader;

  @NonNull
  public final TextView textviewSavePreset;

  @NonNull
  public final TextView textviewSimulatorAircraftFlyingLabel;

  @NonNull
  public final TextView textviewSimulatorAircraftFlyingValue;

  @NonNull
  public final TextView textviewSimulatorAircraftPitchValue;

  @NonNull
  public final TextView textviewSimulatorAircraftRollValue;

  @NonNull
  public final TextView textviewSimulatorAircraftYawValue;

  @NonNull
  public final TextView textviewSimulatorFrequencyLabel;

  @NonNull
  public final TextView textviewSimulatorFrequencyValue;

  @NonNull
  public final TextView textviewSimulatorLatitudeLabel;

  @NonNull
  public final TextView textviewSimulatorLatitudeValue;

  @NonNull
  public final TextView textviewSimulatorLongitudeLabel;

  @NonNull
  public final TextView textviewSimulatorLongitudeValue;

  @NonNull
  public final TextView textviewSimulatorMotorsLabel;

  @NonNull
  public final TextView textviewSimulatorMotorsValue;

  @NonNull
  public final TextView textviewSimulatorPitchLabel;

  @NonNull
  public final TextView textviewSimulatorRollLabel;

  @NonNull
  public final TextView textviewSimulatorSatelliteLabel;

  @NonNull
  public final TextView textviewSimulatorSatelliteValue;

  @NonNull
  public final TextView textviewSimulatorTitle;

  @NonNull
  public final TextView textviewSimulatorWorldXLabel;

  @NonNull
  public final TextView textviewSimulatorWorldXValue;

  @NonNull
  public final TextView textviewSimulatorWorldYLabel;

  @NonNull
  public final TextView textviewSimulatorWorldYValue;

  @NonNull
  public final TextView textviewSimulatorWorldZLabel;

  @NonNull
  public final TextView textviewSimulatorWorldZValue;

  @NonNull
  public final TextView textviewSimulatorYawLabel;

  @NonNull
  public final TextView textviewStatusSectionHeader;

  @NonNull
  public final TextView textviewWindSectionHeader;

  @NonNull
  public final TextView textviewWindSpeedXLabel;

  @NonNull
  public final TextView textviewWindSpeedYLabel;

  @NonNull
  public final TextView textviewWindSpeedZLabel;

  @NonNull
  public final View windSectionFooter;

  private UxsdkWidgetSimulatorControlBinding(@NonNull View rootView,
      @NonNull View attitudeSectionFooter, @NonNull Group constraintGroupAircraftState,
      @NonNull Group constraintGroupAttitude, @NonNull Group constraintGroupButtons,
      @NonNull Group constraintGroupRealWorld, @NonNull Group constraintGroupWind,
      @NonNull EditText editTextSimulatorLat, @NonNull EditText editTextSimulatorLng,
      @NonNull View locationSectionFooter, @NonNull HorizontalSeekBar seekBarFrequency,
      @NonNull HorizontalSeekBar seekBarSatelliteCount,
      @NonNull HorizontalSeekBar seekBarWindSpeedX, @NonNull HorizontalSeekBar seekBarWindSpeedY,
      @NonNull HorizontalSeekBar seekBarWindSpeedZ, @NonNull View statusSectionFooter,
      @NonNull Switch switchSimulator, @NonNull TextView textviewAttitudeSectionHeader,
      @NonNull TextView textviewLoadPreset, @NonNull TextView textviewLocationSectionHeader,
      @NonNull TextView textviewSavePreset, @NonNull TextView textviewSimulatorAircraftFlyingLabel,
      @NonNull TextView textviewSimulatorAircraftFlyingValue,
      @NonNull TextView textviewSimulatorAircraftPitchValue,
      @NonNull TextView textviewSimulatorAircraftRollValue,
      @NonNull TextView textviewSimulatorAircraftYawValue,
      @NonNull TextView textviewSimulatorFrequencyLabel,
      @NonNull TextView textviewSimulatorFrequencyValue,
      @NonNull TextView textviewSimulatorLatitudeLabel,
      @NonNull TextView textviewSimulatorLatitudeValue,
      @NonNull TextView textviewSimulatorLongitudeLabel,
      @NonNull TextView textviewSimulatorLongitudeValue,
      @NonNull TextView textviewSimulatorMotorsLabel,
      @NonNull TextView textviewSimulatorMotorsValue, @NonNull TextView textviewSimulatorPitchLabel,
      @NonNull TextView textviewSimulatorRollLabel,
      @NonNull TextView textviewSimulatorSatelliteLabel,
      @NonNull TextView textviewSimulatorSatelliteValue, @NonNull TextView textviewSimulatorTitle,
      @NonNull TextView textviewSimulatorWorldXLabel,
      @NonNull TextView textviewSimulatorWorldXValue,
      @NonNull TextView textviewSimulatorWorldYLabel,
      @NonNull TextView textviewSimulatorWorldYValue,
      @NonNull TextView textviewSimulatorWorldZLabel,
      @NonNull TextView textviewSimulatorWorldZValue, @NonNull TextView textviewSimulatorYawLabel,
      @NonNull TextView textviewStatusSectionHeader, @NonNull TextView textviewWindSectionHeader,
      @NonNull TextView textviewWindSpeedXLabel, @NonNull TextView textviewWindSpeedYLabel,
      @NonNull TextView textviewWindSpeedZLabel, @NonNull View windSectionFooter) {
    this.rootView = rootView;
    this.attitudeSectionFooter = attitudeSectionFooter;
    this.constraintGroupAircraftState = constraintGroupAircraftState;
    this.constraintGroupAttitude = constraintGroupAttitude;
    this.constraintGroupButtons = constraintGroupButtons;
    this.constraintGroupRealWorld = constraintGroupRealWorld;
    this.constraintGroupWind = constraintGroupWind;
    this.editTextSimulatorLat = editTextSimulatorLat;
    this.editTextSimulatorLng = editTextSimulatorLng;
    this.locationSectionFooter = locationSectionFooter;
    this.seekBarFrequency = seekBarFrequency;
    this.seekBarSatelliteCount = seekBarSatelliteCount;
    this.seekBarWindSpeedX = seekBarWindSpeedX;
    this.seekBarWindSpeedY = seekBarWindSpeedY;
    this.seekBarWindSpeedZ = seekBarWindSpeedZ;
    this.statusSectionFooter = statusSectionFooter;
    this.switchSimulator = switchSimulator;
    this.textviewAttitudeSectionHeader = textviewAttitudeSectionHeader;
    this.textviewLoadPreset = textviewLoadPreset;
    this.textviewLocationSectionHeader = textviewLocationSectionHeader;
    this.textviewSavePreset = textviewSavePreset;
    this.textviewSimulatorAircraftFlyingLabel = textviewSimulatorAircraftFlyingLabel;
    this.textviewSimulatorAircraftFlyingValue = textviewSimulatorAircraftFlyingValue;
    this.textviewSimulatorAircraftPitchValue = textviewSimulatorAircraftPitchValue;
    this.textviewSimulatorAircraftRollValue = textviewSimulatorAircraftRollValue;
    this.textviewSimulatorAircraftYawValue = textviewSimulatorAircraftYawValue;
    this.textviewSimulatorFrequencyLabel = textviewSimulatorFrequencyLabel;
    this.textviewSimulatorFrequencyValue = textviewSimulatorFrequencyValue;
    this.textviewSimulatorLatitudeLabel = textviewSimulatorLatitudeLabel;
    this.textviewSimulatorLatitudeValue = textviewSimulatorLatitudeValue;
    this.textviewSimulatorLongitudeLabel = textviewSimulatorLongitudeLabel;
    this.textviewSimulatorLongitudeValue = textviewSimulatorLongitudeValue;
    this.textviewSimulatorMotorsLabel = textviewSimulatorMotorsLabel;
    this.textviewSimulatorMotorsValue = textviewSimulatorMotorsValue;
    this.textviewSimulatorPitchLabel = textviewSimulatorPitchLabel;
    this.textviewSimulatorRollLabel = textviewSimulatorRollLabel;
    this.textviewSimulatorSatelliteLabel = textviewSimulatorSatelliteLabel;
    this.textviewSimulatorSatelliteValue = textviewSimulatorSatelliteValue;
    this.textviewSimulatorTitle = textviewSimulatorTitle;
    this.textviewSimulatorWorldXLabel = textviewSimulatorWorldXLabel;
    this.textviewSimulatorWorldXValue = textviewSimulatorWorldXValue;
    this.textviewSimulatorWorldYLabel = textviewSimulatorWorldYLabel;
    this.textviewSimulatorWorldYValue = textviewSimulatorWorldYValue;
    this.textviewSimulatorWorldZLabel = textviewSimulatorWorldZLabel;
    this.textviewSimulatorWorldZValue = textviewSimulatorWorldZValue;
    this.textviewSimulatorYawLabel = textviewSimulatorYawLabel;
    this.textviewStatusSectionHeader = textviewStatusSectionHeader;
    this.textviewWindSectionHeader = textviewWindSectionHeader;
    this.textviewWindSpeedXLabel = textviewWindSpeedXLabel;
    this.textviewWindSpeedYLabel = textviewWindSpeedYLabel;
    this.textviewWindSpeedZLabel = textviewWindSpeedZLabel;
    this.windSectionFooter = windSectionFooter;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static UxsdkWidgetSimulatorControlBinding inflate(@NonNull LayoutInflater inflater,
      @NonNull ViewGroup parent) {
    if (parent == null) {
      throw new NullPointerException("parent");
    }
    inflater.inflate(R.layout.uxsdk_widget_simulator_control, parent);
    return bind(parent);
  }

  @NonNull
  public static UxsdkWidgetSimulatorControlBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.attitude_section_footer;
      View attitudeSectionFooter = ViewBindings.findChildViewById(rootView, id);
      if (attitudeSectionFooter == null) {
        break missingId;
      }

      id = R.id.constraint_group_aircraft_state;
      Group constraintGroupAircraftState = ViewBindings.findChildViewById(rootView, id);
      if (constraintGroupAircraftState == null) {
        break missingId;
      }

      id = R.id.constraint_group_attitude;
      Group constraintGroupAttitude = ViewBindings.findChildViewById(rootView, id);
      if (constraintGroupAttitude == null) {
        break missingId;
      }

      id = R.id.constraint_group_buttons;
      Group constraintGroupButtons = ViewBindings.findChildViewById(rootView, id);
      if (constraintGroupButtons == null) {
        break missingId;
      }

      id = R.id.constraint_group_real_world;
      Group constraintGroupRealWorld = ViewBindings.findChildViewById(rootView, id);
      if (constraintGroupRealWorld == null) {
        break missingId;
      }

      id = R.id.constraint_group_wind;
      Group constraintGroupWind = ViewBindings.findChildViewById(rootView, id);
      if (constraintGroupWind == null) {
        break missingId;
      }

      id = R.id.edit_text_simulator_lat;
      EditText editTextSimulatorLat = ViewBindings.findChildViewById(rootView, id);
      if (editTextSimulatorLat == null) {
        break missingId;
      }

      id = R.id.edit_text_simulator_lng;
      EditText editTextSimulatorLng = ViewBindings.findChildViewById(rootView, id);
      if (editTextSimulatorLng == null) {
        break missingId;
      }

      id = R.id.location_section_footer;
      View locationSectionFooter = ViewBindings.findChildViewById(rootView, id);
      if (locationSectionFooter == null) {
        break missingId;
      }

      id = R.id.seek_bar_frequency;
      HorizontalSeekBar seekBarFrequency = ViewBindings.findChildViewById(rootView, id);
      if (seekBarFrequency == null) {
        break missingId;
      }

      id = R.id.seek_bar_satellite_count;
      HorizontalSeekBar seekBarSatelliteCount = ViewBindings.findChildViewById(rootView, id);
      if (seekBarSatelliteCount == null) {
        break missingId;
      }

      id = R.id.seek_bar_wind_speed_x;
      HorizontalSeekBar seekBarWindSpeedX = ViewBindings.findChildViewById(rootView, id);
      if (seekBarWindSpeedX == null) {
        break missingId;
      }

      id = R.id.seek_bar_wind_speed_y;
      HorizontalSeekBar seekBarWindSpeedY = ViewBindings.findChildViewById(rootView, id);
      if (seekBarWindSpeedY == null) {
        break missingId;
      }

      id = R.id.seek_bar_wind_speed_z;
      HorizontalSeekBar seekBarWindSpeedZ = ViewBindings.findChildViewById(rootView, id);
      if (seekBarWindSpeedZ == null) {
        break missingId;
      }

      id = R.id.status_section_footer;
      View statusSectionFooter = ViewBindings.findChildViewById(rootView, id);
      if (statusSectionFooter == null) {
        break missingId;
      }

      id = R.id.switch_simulator;
      Switch switchSimulator = ViewBindings.findChildViewById(rootView, id);
      if (switchSimulator == null) {
        break missingId;
      }

      id = R.id.textview_attitude_section_header;
      TextView textviewAttitudeSectionHeader = ViewBindings.findChildViewById(rootView, id);
      if (textviewAttitudeSectionHeader == null) {
        break missingId;
      }

      id = R.id.textview_load_preset;
      TextView textviewLoadPreset = ViewBindings.findChildViewById(rootView, id);
      if (textviewLoadPreset == null) {
        break missingId;
      }

      id = R.id.textview_location_section_header;
      TextView textviewLocationSectionHeader = ViewBindings.findChildViewById(rootView, id);
      if (textviewLocationSectionHeader == null) {
        break missingId;
      }

      id = R.id.textview_save_preset;
      TextView textviewSavePreset = ViewBindings.findChildViewById(rootView, id);
      if (textviewSavePreset == null) {
        break missingId;
      }

      id = R.id.textview_simulator_aircraft_flying_label;
      TextView textviewSimulatorAircraftFlyingLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorAircraftFlyingLabel == null) {
        break missingId;
      }

      id = R.id.textview_simulator_aircraft_flying_value;
      TextView textviewSimulatorAircraftFlyingValue = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorAircraftFlyingValue == null) {
        break missingId;
      }

      id = R.id.textview_simulator_aircraft_pitch_value;
      TextView textviewSimulatorAircraftPitchValue = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorAircraftPitchValue == null) {
        break missingId;
      }

      id = R.id.textview_simulator_aircraft_roll_value;
      TextView textviewSimulatorAircraftRollValue = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorAircraftRollValue == null) {
        break missingId;
      }

      id = R.id.textview_simulator_aircraft_yaw_value;
      TextView textviewSimulatorAircraftYawValue = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorAircraftYawValue == null) {
        break missingId;
      }

      id = R.id.textview_simulator_frequency_label;
      TextView textviewSimulatorFrequencyLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorFrequencyLabel == null) {
        break missingId;
      }

      id = R.id.textview_simulator_frequency_value;
      TextView textviewSimulatorFrequencyValue = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorFrequencyValue == null) {
        break missingId;
      }

      id = R.id.textview_simulator_latitude_label;
      TextView textviewSimulatorLatitudeLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorLatitudeLabel == null) {
        break missingId;
      }

      id = R.id.textview_simulator_latitude_value;
      TextView textviewSimulatorLatitudeValue = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorLatitudeValue == null) {
        break missingId;
      }

      id = R.id.textview_simulator_longitude_label;
      TextView textviewSimulatorLongitudeLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorLongitudeLabel == null) {
        break missingId;
      }

      id = R.id.textview_simulator_longitude_value;
      TextView textviewSimulatorLongitudeValue = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorLongitudeValue == null) {
        break missingId;
      }

      id = R.id.textview_simulator_motors_label;
      TextView textviewSimulatorMotorsLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorMotorsLabel == null) {
        break missingId;
      }

      id = R.id.textview_simulator_motors_value;
      TextView textviewSimulatorMotorsValue = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorMotorsValue == null) {
        break missingId;
      }

      id = R.id.textview_simulator_pitch_label;
      TextView textviewSimulatorPitchLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorPitchLabel == null) {
        break missingId;
      }

      id = R.id.textview_simulator_roll_label;
      TextView textviewSimulatorRollLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorRollLabel == null) {
        break missingId;
      }

      id = R.id.textview_simulator_satellite_label;
      TextView textviewSimulatorSatelliteLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorSatelliteLabel == null) {
        break missingId;
      }

      id = R.id.textview_simulator_satellite_value;
      TextView textviewSimulatorSatelliteValue = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorSatelliteValue == null) {
        break missingId;
      }

      id = R.id.textview_simulator_title;
      TextView textviewSimulatorTitle = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorTitle == null) {
        break missingId;
      }

      id = R.id.textview_simulator_world_x_label;
      TextView textviewSimulatorWorldXLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorWorldXLabel == null) {
        break missingId;
      }

      id = R.id.textview_simulator_world_x_value;
      TextView textviewSimulatorWorldXValue = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorWorldXValue == null) {
        break missingId;
      }

      id = R.id.textview_simulator_world_y_label;
      TextView textviewSimulatorWorldYLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorWorldYLabel == null) {
        break missingId;
      }

      id = R.id.textview_simulator_world_y_value;
      TextView textviewSimulatorWorldYValue = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorWorldYValue == null) {
        break missingId;
      }

      id = R.id.textview_simulator_world_z_label;
      TextView textviewSimulatorWorldZLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorWorldZLabel == null) {
        break missingId;
      }

      id = R.id.textview_simulator_world_z_value;
      TextView textviewSimulatorWorldZValue = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorWorldZValue == null) {
        break missingId;
      }

      id = R.id.textview_simulator_yaw_label;
      TextView textviewSimulatorYawLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewSimulatorYawLabel == null) {
        break missingId;
      }

      id = R.id.textview_status_section_header;
      TextView textviewStatusSectionHeader = ViewBindings.findChildViewById(rootView, id);
      if (textviewStatusSectionHeader == null) {
        break missingId;
      }

      id = R.id.textview_wind_section_header;
      TextView textviewWindSectionHeader = ViewBindings.findChildViewById(rootView, id);
      if (textviewWindSectionHeader == null) {
        break missingId;
      }

      id = R.id.textview_wind_speed_x_label;
      TextView textviewWindSpeedXLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewWindSpeedXLabel == null) {
        break missingId;
      }

      id = R.id.textview_wind_speed_y_label;
      TextView textviewWindSpeedYLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewWindSpeedYLabel == null) {
        break missingId;
      }

      id = R.id.textview_wind_speed_z_label;
      TextView textviewWindSpeedZLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewWindSpeedZLabel == null) {
        break missingId;
      }

      id = R.id.wind_section_footer;
      View windSectionFooter = ViewBindings.findChildViewById(rootView, id);
      if (windSectionFooter == null) {
        break missingId;
      }

      return new UxsdkWidgetSimulatorControlBinding(rootView, attitudeSectionFooter,
          constraintGroupAircraftState, constraintGroupAttitude, constraintGroupButtons,
          constraintGroupRealWorld, constraintGroupWind, editTextSimulatorLat, editTextSimulatorLng,
          locationSectionFooter, seekBarFrequency, seekBarSatelliteCount, seekBarWindSpeedX,
          seekBarWindSpeedY, seekBarWindSpeedZ, statusSectionFooter, switchSimulator,
          textviewAttitudeSectionHeader, textviewLoadPreset, textviewLocationSectionHeader,
          textviewSavePreset, textviewSimulatorAircraftFlyingLabel,
          textviewSimulatorAircraftFlyingValue, textviewSimulatorAircraftPitchValue,
          textviewSimulatorAircraftRollValue, textviewSimulatorAircraftYawValue,
          textviewSimulatorFrequencyLabel, textviewSimulatorFrequencyValue,
          textviewSimulatorLatitudeLabel, textviewSimulatorLatitudeValue,
          textviewSimulatorLongitudeLabel, textviewSimulatorLongitudeValue,
          textviewSimulatorMotorsLabel, textviewSimulatorMotorsValue, textviewSimulatorPitchLabel,
          textviewSimulatorRollLabel, textviewSimulatorSatelliteLabel,
          textviewSimulatorSatelliteValue, textviewSimulatorTitle, textviewSimulatorWorldXLabel,
          textviewSimulatorWorldXValue, textviewSimulatorWorldYLabel, textviewSimulatorWorldYValue,
          textviewSimulatorWorldZLabel, textviewSimulatorWorldZValue, textviewSimulatorYawLabel,
          textviewStatusSectionHeader, textviewWindSectionHeader, textviewWindSpeedXLabel,
          textviewWindSpeedYLabel, textviewWindSpeedZLabel, windSectionFooter);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
