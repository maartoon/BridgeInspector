// Generated by view binder compiler. Do not edit!
package dji.v5.ux.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import dji.v5.ux.R;
import dji.v5.ux.core.base.charts.view.LineChartView;
import dji.v5.ux.core.widget.hd.frequency.ChartLeftYAxisView;
import dji.v5.ux.core.widget.hd.frequency.ChartRightYAxisView;
import dji.v5.ux.core.widget.hd.frequency.DistanceLineView;
import dji.v5.ux.core.widget.hd.frequency.FreqRangeRectView;
import dji.v5.ux.core.widget.hd.frequency.FreqRangeTextView;
import dji.v5.ux.core.widget.hd.frequency.RectCenterTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UxsdkSdrFreqViewBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout sdrChartLy;

  @NonNull
  public final TextView sdrCustomAlertTip;

  @NonNull
  public final FreqRangeTextView sdrFreqRangeTv;

  @NonNull
  public final DistanceLineView sdrQualityLine;

  @NonNull
  public final LinearLayout sdrQualityTip;

  @NonNull
  public final ChartRightYAxisView sdrQualityValue;

  @NonNull
  public final RectCenterTextView sdrRectAverageValue;

  @NonNull
  public final ImageView sdrSnrFreqRangeCenterDown;

  @NonNull
  public final ImageView sdrSnrFreqRangeCenterUp;

  @NonNull
  public final FreqRangeRectView sdrSnrFreqRangeRect;

  @NonNull
  public final ProgressBar sdrSnrFreqRectPgb;

  @NonNull
  public final LineChartView sdrSnrLine;

  @NonNull
  public final ChartLeftYAxisView sdrYAxisNumber;

  @NonNull
  public final TextView sdrYAxisUnit;

  private UxsdkSdrFreqViewBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout sdrChartLy, @NonNull TextView sdrCustomAlertTip,
      @NonNull FreqRangeTextView sdrFreqRangeTv, @NonNull DistanceLineView sdrQualityLine,
      @NonNull LinearLayout sdrQualityTip, @NonNull ChartRightYAxisView sdrQualityValue,
      @NonNull RectCenterTextView sdrRectAverageValue, @NonNull ImageView sdrSnrFreqRangeCenterDown,
      @NonNull ImageView sdrSnrFreqRangeCenterUp, @NonNull FreqRangeRectView sdrSnrFreqRangeRect,
      @NonNull ProgressBar sdrSnrFreqRectPgb, @NonNull LineChartView sdrSnrLine,
      @NonNull ChartLeftYAxisView sdrYAxisNumber, @NonNull TextView sdrYAxisUnit) {
    this.rootView = rootView;
    this.sdrChartLy = sdrChartLy;
    this.sdrCustomAlertTip = sdrCustomAlertTip;
    this.sdrFreqRangeTv = sdrFreqRangeTv;
    this.sdrQualityLine = sdrQualityLine;
    this.sdrQualityTip = sdrQualityTip;
    this.sdrQualityValue = sdrQualityValue;
    this.sdrRectAverageValue = sdrRectAverageValue;
    this.sdrSnrFreqRangeCenterDown = sdrSnrFreqRangeCenterDown;
    this.sdrSnrFreqRangeCenterUp = sdrSnrFreqRangeCenterUp;
    this.sdrSnrFreqRangeRect = sdrSnrFreqRangeRect;
    this.sdrSnrFreqRectPgb = sdrSnrFreqRectPgb;
    this.sdrSnrLine = sdrSnrLine;
    this.sdrYAxisNumber = sdrYAxisNumber;
    this.sdrYAxisUnit = sdrYAxisUnit;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UxsdkSdrFreqViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UxsdkSdrFreqViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.uxsdk_sdr_freq_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UxsdkSdrFreqViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.sdr_chart_ly;
      RelativeLayout sdrChartLy = ViewBindings.findChildViewById(rootView, id);
      if (sdrChartLy == null) {
        break missingId;
      }

      id = R.id.sdr_custom_alert_tip;
      TextView sdrCustomAlertTip = ViewBindings.findChildViewById(rootView, id);
      if (sdrCustomAlertTip == null) {
        break missingId;
      }

      id = R.id.sdr_freq_range_tv;
      FreqRangeTextView sdrFreqRangeTv = ViewBindings.findChildViewById(rootView, id);
      if (sdrFreqRangeTv == null) {
        break missingId;
      }

      id = R.id.sdr_quality_line;
      DistanceLineView sdrQualityLine = ViewBindings.findChildViewById(rootView, id);
      if (sdrQualityLine == null) {
        break missingId;
      }

      id = R.id.sdr_quality_tip;
      LinearLayout sdrQualityTip = ViewBindings.findChildViewById(rootView, id);
      if (sdrQualityTip == null) {
        break missingId;
      }

      id = R.id.sdr_quality_value;
      ChartRightYAxisView sdrQualityValue = ViewBindings.findChildViewById(rootView, id);
      if (sdrQualityValue == null) {
        break missingId;
      }

      id = R.id.sdr_rect_average_value;
      RectCenterTextView sdrRectAverageValue = ViewBindings.findChildViewById(rootView, id);
      if (sdrRectAverageValue == null) {
        break missingId;
      }

      id = R.id.sdr_snr_freq_range_center_down;
      ImageView sdrSnrFreqRangeCenterDown = ViewBindings.findChildViewById(rootView, id);
      if (sdrSnrFreqRangeCenterDown == null) {
        break missingId;
      }

      id = R.id.sdr_snr_freq_range_center_up;
      ImageView sdrSnrFreqRangeCenterUp = ViewBindings.findChildViewById(rootView, id);
      if (sdrSnrFreqRangeCenterUp == null) {
        break missingId;
      }

      id = R.id.sdr_snr_freq_range_rect;
      FreqRangeRectView sdrSnrFreqRangeRect = ViewBindings.findChildViewById(rootView, id);
      if (sdrSnrFreqRangeRect == null) {
        break missingId;
      }

      id = R.id.sdr_snr_freq_rect_pgb;
      ProgressBar sdrSnrFreqRectPgb = ViewBindings.findChildViewById(rootView, id);
      if (sdrSnrFreqRectPgb == null) {
        break missingId;
      }

      id = R.id.sdr_snr_line;
      LineChartView sdrSnrLine = ViewBindings.findChildViewById(rootView, id);
      if (sdrSnrLine == null) {
        break missingId;
      }

      id = R.id.sdr_y_axis_number;
      ChartLeftYAxisView sdrYAxisNumber = ViewBindings.findChildViewById(rootView, id);
      if (sdrYAxisNumber == null) {
        break missingId;
      }

      id = R.id.sdr_y_axis_unit;
      TextView sdrYAxisUnit = ViewBindings.findChildViewById(rootView, id);
      if (sdrYAxisUnit == null) {
        break missingId;
      }

      return new UxsdkSdrFreqViewBinding((RelativeLayout) rootView, sdrChartLy, sdrCustomAlertTip,
          sdrFreqRangeTv, sdrQualityLine, sdrQualityTip, sdrQualityValue, sdrRectAverageValue,
          sdrSnrFreqRangeCenterDown, sdrSnrFreqRangeCenterUp, sdrSnrFreqRangeRect,
          sdrSnrFreqRectPgb, sdrSnrLine, sdrYAxisNumber, sdrYAxisUnit);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
