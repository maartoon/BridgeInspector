// Generated by view binder compiler. Do not edit!
package dji.v5.ux.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import dji.v5.ux.R;
import dji.v5.ux.visualcamera.aperture.CameraConfigApertureWidget;
import dji.v5.ux.visualcamera.ev.CameraConfigEVWidget;
import dji.v5.ux.visualcamera.iso.CameraConfigISOAndEIWidget;
import dji.v5.ux.visualcamera.shutter.CameraConfigShutterWidget;
import dji.v5.ux.visualcamera.storage.CameraConfigStorageWidget;
import dji.v5.ux.visualcamera.wb.CameraConfigWBWidget;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UxsdkPanelCommonCameraBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CameraConfigApertureWidget widgetCameraConfigAperture;

  @NonNull
  public final CameraConfigEVWidget widgetCameraConfigEv;

  @NonNull
  public final CameraConfigISOAndEIWidget widgetCameraConfigIsoAndEi;

  @NonNull
  public final CameraConfigShutterWidget widgetCameraConfigShutter;

  @NonNull
  public final CameraConfigStorageWidget widgetCameraConfigStorage;

  @NonNull
  public final CameraConfigWBWidget widgetCameraConfigWb;

  private UxsdkPanelCommonCameraBinding(@NonNull ConstraintLayout rootView,
      @NonNull CameraConfigApertureWidget widgetCameraConfigAperture,
      @NonNull CameraConfigEVWidget widgetCameraConfigEv,
      @NonNull CameraConfigISOAndEIWidget widgetCameraConfigIsoAndEi,
      @NonNull CameraConfigShutterWidget widgetCameraConfigShutter,
      @NonNull CameraConfigStorageWidget widgetCameraConfigStorage,
      @NonNull CameraConfigWBWidget widgetCameraConfigWb) {
    this.rootView = rootView;
    this.widgetCameraConfigAperture = widgetCameraConfigAperture;
    this.widgetCameraConfigEv = widgetCameraConfigEv;
    this.widgetCameraConfigIsoAndEi = widgetCameraConfigIsoAndEi;
    this.widgetCameraConfigShutter = widgetCameraConfigShutter;
    this.widgetCameraConfigStorage = widgetCameraConfigStorage;
    this.widgetCameraConfigWb = widgetCameraConfigWb;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UxsdkPanelCommonCameraBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UxsdkPanelCommonCameraBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.uxsdk_panel_common_camera, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UxsdkPanelCommonCameraBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.widget_camera_config_aperture;
      CameraConfigApertureWidget widgetCameraConfigAperture = ViewBindings.findChildViewById(rootView, id);
      if (widgetCameraConfigAperture == null) {
        break missingId;
      }

      id = R.id.widget_camera_config_ev;
      CameraConfigEVWidget widgetCameraConfigEv = ViewBindings.findChildViewById(rootView, id);
      if (widgetCameraConfigEv == null) {
        break missingId;
      }

      id = R.id.widget_camera_config_iso_and_ei;
      CameraConfigISOAndEIWidget widgetCameraConfigIsoAndEi = ViewBindings.findChildViewById(rootView, id);
      if (widgetCameraConfigIsoAndEi == null) {
        break missingId;
      }

      id = R.id.widget_camera_config_shutter;
      CameraConfigShutterWidget widgetCameraConfigShutter = ViewBindings.findChildViewById(rootView, id);
      if (widgetCameraConfigShutter == null) {
        break missingId;
      }

      id = R.id.widget_camera_config_storage;
      CameraConfigStorageWidget widgetCameraConfigStorage = ViewBindings.findChildViewById(rootView, id);
      if (widgetCameraConfigStorage == null) {
        break missingId;
      }

      id = R.id.widget_camera_config_wb;
      CameraConfigWBWidget widgetCameraConfigWb = ViewBindings.findChildViewById(rootView, id);
      if (widgetCameraConfigWb == null) {
        break missingId;
      }

      return new UxsdkPanelCommonCameraBinding((ConstraintLayout) rootView,
          widgetCameraConfigAperture, widgetCameraConfigEv, widgetCameraConfigIsoAndEi,
          widgetCameraConfigShutter, widgetCameraConfigStorage, widgetCameraConfigWb);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
