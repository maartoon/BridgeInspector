// Generated by view binder compiler. Do not edit!
package dji.v5.ux.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import dji.v5.ux.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UxsdkLayoutTitleBarBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  @NonNull
  public final ImageView imageViewBack;

  @NonNull
  public final ImageView imageViewClose;

  @NonNull
  public final TextView textViewTitle;

  @NonNull
  public final View viewBackBackground;

  @NonNull
  public final View viewCloseBackground;

  @NonNull
  public final View viewTitleBarContainer;

  private UxsdkLayoutTitleBarBinding(@NonNull View rootView, @NonNull ImageView imageViewBack,
      @NonNull ImageView imageViewClose, @NonNull TextView textViewTitle,
      @NonNull View viewBackBackground, @NonNull View viewCloseBackground,
      @NonNull View viewTitleBarContainer) {
    this.rootView = rootView;
    this.imageViewBack = imageViewBack;
    this.imageViewClose = imageViewClose;
    this.textViewTitle = textViewTitle;
    this.viewBackBackground = viewBackBackground;
    this.viewCloseBackground = viewCloseBackground;
    this.viewTitleBarContainer = viewTitleBarContainer;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static UxsdkLayoutTitleBarBinding inflate(@NonNull LayoutInflater inflater,
      @NonNull ViewGroup parent) {
    if (parent == null) {
      throw new NullPointerException("parent");
    }
    inflater.inflate(R.layout.uxsdk_layout_title_bar, parent);
    return bind(parent);
  }

  @NonNull
  public static UxsdkLayoutTitleBarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.image_view_back;
      ImageView imageViewBack = ViewBindings.findChildViewById(rootView, id);
      if (imageViewBack == null) {
        break missingId;
      }

      id = R.id.image_view_close;
      ImageView imageViewClose = ViewBindings.findChildViewById(rootView, id);
      if (imageViewClose == null) {
        break missingId;
      }

      id = R.id.text_view_title;
      TextView textViewTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewTitle == null) {
        break missingId;
      }

      id = R.id.view_back_background;
      View viewBackBackground = ViewBindings.findChildViewById(rootView, id);
      if (viewBackBackground == null) {
        break missingId;
      }

      id = R.id.view_close_background;
      View viewCloseBackground = ViewBindings.findChildViewById(rootView, id);
      if (viewCloseBackground == null) {
        break missingId;
      }

      id = R.id.view_title_bar_container;
      View viewTitleBarContainer = ViewBindings.findChildViewById(rootView, id);
      if (viewTitleBarContainer == null) {
        break missingId;
      }

      return new UxsdkLayoutTitleBarBinding(rootView, imageViewBack, imageViewClose, textViewTitle,
          viewBackBackground, viewCloseBackground, viewTitleBarContainer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
