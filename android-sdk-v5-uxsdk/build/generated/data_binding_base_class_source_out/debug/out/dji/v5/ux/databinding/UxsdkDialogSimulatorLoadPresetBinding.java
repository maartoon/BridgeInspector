// Generated by view binder compiler. Do not edit!
package dji.v5.ux.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import dji.v5.ux.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UxsdkDialogSimulatorLoadPresetBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout linearLayoutPresetListContainer;

  @NonNull
  public final ScrollView scrollViewPresetListContainer;

  @NonNull
  public final TextView textviewCancelSimulatorDialog;

  @NonNull
  public final TextView textviewConfirmationDelete;

  @NonNull
  public final TextView textviewDeleteNo;

  @NonNull
  public final TextView textviewDeleteYes;

  @NonNull
  public final TextView textviewEmptyList;

  @NonNull
  public final TextView textviewLoadPresetHeader;

  @NonNull
  public final View viewHeaderSeparator;

  private UxsdkDialogSimulatorLoadPresetBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout linearLayoutPresetListContainer,
      @NonNull ScrollView scrollViewPresetListContainer,
      @NonNull TextView textviewCancelSimulatorDialog, @NonNull TextView textviewConfirmationDelete,
      @NonNull TextView textviewDeleteNo, @NonNull TextView textviewDeleteYes,
      @NonNull TextView textviewEmptyList, @NonNull TextView textviewLoadPresetHeader,
      @NonNull View viewHeaderSeparator) {
    this.rootView = rootView;
    this.linearLayoutPresetListContainer = linearLayoutPresetListContainer;
    this.scrollViewPresetListContainer = scrollViewPresetListContainer;
    this.textviewCancelSimulatorDialog = textviewCancelSimulatorDialog;
    this.textviewConfirmationDelete = textviewConfirmationDelete;
    this.textviewDeleteNo = textviewDeleteNo;
    this.textviewDeleteYes = textviewDeleteYes;
    this.textviewEmptyList = textviewEmptyList;
    this.textviewLoadPresetHeader = textviewLoadPresetHeader;
    this.viewHeaderSeparator = viewHeaderSeparator;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UxsdkDialogSimulatorLoadPresetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UxsdkDialogSimulatorLoadPresetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.uxsdk_dialog_simulator_load_preset, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UxsdkDialogSimulatorLoadPresetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.linear_layout_preset_list_container;
      LinearLayout linearLayoutPresetListContainer = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutPresetListContainer == null) {
        break missingId;
      }

      id = R.id.scroll_view_preset_list_container;
      ScrollView scrollViewPresetListContainer = ViewBindings.findChildViewById(rootView, id);
      if (scrollViewPresetListContainer == null) {
        break missingId;
      }

      id = R.id.textview_cancel_simulator_dialog;
      TextView textviewCancelSimulatorDialog = ViewBindings.findChildViewById(rootView, id);
      if (textviewCancelSimulatorDialog == null) {
        break missingId;
      }

      id = R.id.textview_confirmation_delete;
      TextView textviewConfirmationDelete = ViewBindings.findChildViewById(rootView, id);
      if (textviewConfirmationDelete == null) {
        break missingId;
      }

      id = R.id.textview_delete_no;
      TextView textviewDeleteNo = ViewBindings.findChildViewById(rootView, id);
      if (textviewDeleteNo == null) {
        break missingId;
      }

      id = R.id.textview_delete_yes;
      TextView textviewDeleteYes = ViewBindings.findChildViewById(rootView, id);
      if (textviewDeleteYes == null) {
        break missingId;
      }

      id = R.id.textview_empty_list;
      TextView textviewEmptyList = ViewBindings.findChildViewById(rootView, id);
      if (textviewEmptyList == null) {
        break missingId;
      }

      id = R.id.textview_load_preset_header;
      TextView textviewLoadPresetHeader = ViewBindings.findChildViewById(rootView, id);
      if (textviewLoadPresetHeader == null) {
        break missingId;
      }

      id = R.id.view_header_separator;
      View viewHeaderSeparator = ViewBindings.findChildViewById(rootView, id);
      if (viewHeaderSeparator == null) {
        break missingId;
      }

      return new UxsdkDialogSimulatorLoadPresetBinding((ConstraintLayout) rootView,
          linearLayoutPresetListContainer, scrollViewPresetListContainer,
          textviewCancelSimulatorDialog, textviewConfirmationDelete, textviewDeleteNo,
          textviewDeleteYes, textviewEmptyList, textviewLoadPresetHeader, viewHeaderSeparator);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
