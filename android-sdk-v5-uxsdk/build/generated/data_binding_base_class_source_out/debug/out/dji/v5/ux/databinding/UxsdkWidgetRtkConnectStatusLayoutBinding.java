// Generated by view binder compiler. Do not edit!
package dji.v5.ux.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import dji.v5.ux.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UxsdkWidgetRtkConnectStatusLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btRtkSignalSearchAgain;

  @NonNull
  public final ConstraintLayout clRtkHasFound;

  @NonNull
  public final ConstraintLayout clRtkNotFound;

  @NonNull
  public final ImageView ivRtkSignalSearchIv;

  @NonNull
  public final RecyclerView rlRtkSignalSearchingList;

  @NonNull
  public final TextView rtkSignalProblemChecked;

  @NonNull
  public final TextView tvRtkSignalProblemCheckedReason;

  @NonNull
  public final TextView tvRtkSignalSearching;

  @NonNull
  public final TextView tvRtkSignalSelectedTitle;

  private UxsdkWidgetRtkConnectStatusLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button btRtkSignalSearchAgain, @NonNull ConstraintLayout clRtkHasFound,
      @NonNull ConstraintLayout clRtkNotFound, @NonNull ImageView ivRtkSignalSearchIv,
      @NonNull RecyclerView rlRtkSignalSearchingList, @NonNull TextView rtkSignalProblemChecked,
      @NonNull TextView tvRtkSignalProblemCheckedReason, @NonNull TextView tvRtkSignalSearching,
      @NonNull TextView tvRtkSignalSelectedTitle) {
    this.rootView = rootView;
    this.btRtkSignalSearchAgain = btRtkSignalSearchAgain;
    this.clRtkHasFound = clRtkHasFound;
    this.clRtkNotFound = clRtkNotFound;
    this.ivRtkSignalSearchIv = ivRtkSignalSearchIv;
    this.rlRtkSignalSearchingList = rlRtkSignalSearchingList;
    this.rtkSignalProblemChecked = rtkSignalProblemChecked;
    this.tvRtkSignalProblemCheckedReason = tvRtkSignalProblemCheckedReason;
    this.tvRtkSignalSearching = tvRtkSignalSearching;
    this.tvRtkSignalSelectedTitle = tvRtkSignalSelectedTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UxsdkWidgetRtkConnectStatusLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UxsdkWidgetRtkConnectStatusLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.uxsdk_widget_rtk_connect_status_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UxsdkWidgetRtkConnectStatusLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bt_rtk_signal_search_again;
      Button btRtkSignalSearchAgain = ViewBindings.findChildViewById(rootView, id);
      if (btRtkSignalSearchAgain == null) {
        break missingId;
      }

      id = R.id.cl_rtk_has_found;
      ConstraintLayout clRtkHasFound = ViewBindings.findChildViewById(rootView, id);
      if (clRtkHasFound == null) {
        break missingId;
      }

      id = R.id.cl_rtk_not_found;
      ConstraintLayout clRtkNotFound = ViewBindings.findChildViewById(rootView, id);
      if (clRtkNotFound == null) {
        break missingId;
      }

      id = R.id.iv_rtk_signal_search_iv;
      ImageView ivRtkSignalSearchIv = ViewBindings.findChildViewById(rootView, id);
      if (ivRtkSignalSearchIv == null) {
        break missingId;
      }

      id = R.id.rl_rtk_signal_searching_list;
      RecyclerView rlRtkSignalSearchingList = ViewBindings.findChildViewById(rootView, id);
      if (rlRtkSignalSearchingList == null) {
        break missingId;
      }

      id = R.id.rtk_signal_problem_checked;
      TextView rtkSignalProblemChecked = ViewBindings.findChildViewById(rootView, id);
      if (rtkSignalProblemChecked == null) {
        break missingId;
      }

      id = R.id.tv_rtk_signal_problem_checked_reason;
      TextView tvRtkSignalProblemCheckedReason = ViewBindings.findChildViewById(rootView, id);
      if (tvRtkSignalProblemCheckedReason == null) {
        break missingId;
      }

      id = R.id.tv_rtk_signal_searching;
      TextView tvRtkSignalSearching = ViewBindings.findChildViewById(rootView, id);
      if (tvRtkSignalSearching == null) {
        break missingId;
      }

      id = R.id.tv_rtk_signal_selected_title;
      TextView tvRtkSignalSelectedTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvRtkSignalSelectedTitle == null) {
        break missingId;
      }

      return new UxsdkWidgetRtkConnectStatusLayoutBinding((ConstraintLayout) rootView,
          btRtkSignalSearchAgain, clRtkHasFound, clRtkNotFound, ivRtkSignalSearchIv,
          rlRtkSignalSearchingList, rtkSignalProblemChecked, tvRtkSignalProblemCheckedReason,
          tvRtkSignalSearching, tvRtkSignalSelectedTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
