// Generated by view binder compiler. Do not edit!
package dji.v5.ux.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import dji.v5.ux.R;
import dji.v5.ux.cameracore.widget.autoexposurelock.AutoExposureLockWidget;
import dji.v5.ux.cameracore.widget.cameracontrols.CameraControlsWidget;
import dji.v5.ux.cameracore.widget.cameracontrols.lenscontrol.LensControlWidget;
import dji.v5.ux.cameracore.widget.focusexposureswitch.FocusExposureSwitchWidget;
import dji.v5.ux.cameracore.widget.focusmode.FocusModeWidget;
import dji.v5.ux.cameracore.widget.fpvinteraction.FPVInteractionWidget;
import dji.v5.ux.core.panel.systemstatus.SystemStatusListPanelWidget;
import dji.v5.ux.core.panel.topbar.TopBarPanelWidget;
import dji.v5.ux.core.widget.fpv.FPVWidget;
import dji.v5.ux.core.widget.hsi.HorizontalSituationIndicatorWidget;
import dji.v5.ux.core.widget.hsi.PrimaryFlightDisplayWidget;
import dji.v5.ux.core.widget.remainingflighttime.RemainingFlightTimeWidget;
import dji.v5.ux.core.widget.setting.SettingPanelWidget;
import dji.v5.ux.flight.returnhome.ReturnHomeWidget;
import dji.v5.ux.flight.takeoff.TakeOffWidget;
import dji.v5.ux.gimbal.GimbalFineTuneWidget;
import dji.v5.ux.map.MapWidget;
import dji.v5.ux.training.simulatorcontrol.SimulatorControlWidget;
import dji.v5.ux.visualcamera.CameraNDVIPanelWidget;
import dji.v5.ux.visualcamera.CameraVisiblePanelWidget;
import dji.v5.ux.visualcamera.zoom.FocalZoomWidget;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UxsdkActivityDefaultLayoutBinding implements ViewBinding {
  @NonNull
  private final DrawerLayout rootView_;

  @NonNull
  public final ConstraintLayout fpvHolder;

  @NonNull
  public final SettingPanelWidget manualRightNavSetting;

  @NonNull
  public final CameraNDVIPanelWidget panelNdviCamera;

  @NonNull
  public final TopBarPanelWidget panelTopBar;

  @NonNull
  public final CameraVisiblePanelWidget panelVisualCamera;

  @NonNull
  public final DrawerLayout rootView;

  @NonNull
  public final GimbalFineTuneWidget settingMenuGimbalFineTune;

  @NonNull
  public final AutoExposureLockWidget widgetAutoExposureLock;

  @NonNull
  public final CameraControlsWidget widgetCameraControls;

  @NonNull
  public final FocalZoomWidget widgetFocalZoom;

  @NonNull
  public final FocusExposureSwitchWidget widgetFocusExposureSwitch;

  @NonNull
  public final FocusModeWidget widgetFocusMode;

  @NonNull
  public final PrimaryFlightDisplayWidget widgetFpvFlightDisplayWidget;

  @NonNull
  public final FPVInteractionWidget widgetFpvInteraction;

  @NonNull
  public final HorizontalSituationIndicatorWidget widgetHorizontalSituationIndicator;

  @NonNull
  public final LensControlWidget widgetLensControl;

  @NonNull
  public final MapWidget widgetMap;

  @NonNull
  public final SystemStatusListPanelWidget widgetPanelSystemStatusList;

  @NonNull
  public final FPVWidget widgetPrimaryFpv;

  @NonNull
  public final RemainingFlightTimeWidget widgetRemainingFlightTime;

  @NonNull
  public final ReturnHomeWidget widgetReturnToHome;

  @NonNull
  public final FPVWidget widgetSecondaryFpv;

  @NonNull
  public final SimulatorControlWidget widgetSimulatorControl;

  @NonNull
  public final TakeOffWidget widgetTakeOff;

  private UxsdkActivityDefaultLayoutBinding(@NonNull DrawerLayout rootView_,
      @NonNull ConstraintLayout fpvHolder, @NonNull SettingPanelWidget manualRightNavSetting,
      @NonNull CameraNDVIPanelWidget panelNdviCamera, @NonNull TopBarPanelWidget panelTopBar,
      @NonNull CameraVisiblePanelWidget panelVisualCamera, @NonNull DrawerLayout rootView,
      @NonNull GimbalFineTuneWidget settingMenuGimbalFineTune,
      @NonNull AutoExposureLockWidget widgetAutoExposureLock,
      @NonNull CameraControlsWidget widgetCameraControls, @NonNull FocalZoomWidget widgetFocalZoom,
      @NonNull FocusExposureSwitchWidget widgetFocusExposureSwitch,
      @NonNull FocusModeWidget widgetFocusMode,
      @NonNull PrimaryFlightDisplayWidget widgetFpvFlightDisplayWidget,
      @NonNull FPVInteractionWidget widgetFpvInteraction,
      @NonNull HorizontalSituationIndicatorWidget widgetHorizontalSituationIndicator,
      @NonNull LensControlWidget widgetLensControl, @NonNull MapWidget widgetMap,
      @NonNull SystemStatusListPanelWidget widgetPanelSystemStatusList,
      @NonNull FPVWidget widgetPrimaryFpv,
      @NonNull RemainingFlightTimeWidget widgetRemainingFlightTime,
      @NonNull ReturnHomeWidget widgetReturnToHome, @NonNull FPVWidget widgetSecondaryFpv,
      @NonNull SimulatorControlWidget widgetSimulatorControl,
      @NonNull TakeOffWidget widgetTakeOff) {
    this.rootView_ = rootView_;
    this.fpvHolder = fpvHolder;
    this.manualRightNavSetting = manualRightNavSetting;
    this.panelNdviCamera = panelNdviCamera;
    this.panelTopBar = panelTopBar;
    this.panelVisualCamera = panelVisualCamera;
    this.rootView = rootView;
    this.settingMenuGimbalFineTune = settingMenuGimbalFineTune;
    this.widgetAutoExposureLock = widgetAutoExposureLock;
    this.widgetCameraControls = widgetCameraControls;
    this.widgetFocalZoom = widgetFocalZoom;
    this.widgetFocusExposureSwitch = widgetFocusExposureSwitch;
    this.widgetFocusMode = widgetFocusMode;
    this.widgetFpvFlightDisplayWidget = widgetFpvFlightDisplayWidget;
    this.widgetFpvInteraction = widgetFpvInteraction;
    this.widgetHorizontalSituationIndicator = widgetHorizontalSituationIndicator;
    this.widgetLensControl = widgetLensControl;
    this.widgetMap = widgetMap;
    this.widgetPanelSystemStatusList = widgetPanelSystemStatusList;
    this.widgetPrimaryFpv = widgetPrimaryFpv;
    this.widgetRemainingFlightTime = widgetRemainingFlightTime;
    this.widgetReturnToHome = widgetReturnToHome;
    this.widgetSecondaryFpv = widgetSecondaryFpv;
    this.widgetSimulatorControl = widgetSimulatorControl;
    this.widgetTakeOff = widgetTakeOff;
  }

  @Override
  @NonNull
  public DrawerLayout getRoot() {
    return rootView_;
  }

  @NonNull
  public static UxsdkActivityDefaultLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UxsdkActivityDefaultLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.uxsdk_activity_default_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UxsdkActivityDefaultLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fpv_holder;
      ConstraintLayout fpvHolder = ViewBindings.findChildViewById(rootView, id);
      if (fpvHolder == null) {
        break missingId;
      }

      id = R.id.manual_right_nav_setting;
      SettingPanelWidget manualRightNavSetting = ViewBindings.findChildViewById(rootView, id);
      if (manualRightNavSetting == null) {
        break missingId;
      }

      id = R.id.panel_ndvi_camera;
      CameraNDVIPanelWidget panelNdviCamera = ViewBindings.findChildViewById(rootView, id);
      if (panelNdviCamera == null) {
        break missingId;
      }

      id = R.id.panel_top_bar;
      TopBarPanelWidget panelTopBar = ViewBindings.findChildViewById(rootView, id);
      if (panelTopBar == null) {
        break missingId;
      }

      id = R.id.panel_visual_camera;
      CameraVisiblePanelWidget panelVisualCamera = ViewBindings.findChildViewById(rootView, id);
      if (panelVisualCamera == null) {
        break missingId;
      }

      DrawerLayout rootView_ = (DrawerLayout) rootView;

      id = R.id.setting_menu_gimbal_fine_tune;
      GimbalFineTuneWidget settingMenuGimbalFineTune = ViewBindings.findChildViewById(rootView, id);
      if (settingMenuGimbalFineTune == null) {
        break missingId;
      }

      id = R.id.widget_auto_exposure_lock;
      AutoExposureLockWidget widgetAutoExposureLock = ViewBindings.findChildViewById(rootView, id);
      if (widgetAutoExposureLock == null) {
        break missingId;
      }

      id = R.id.widget_camera_controls;
      CameraControlsWidget widgetCameraControls = ViewBindings.findChildViewById(rootView, id);
      if (widgetCameraControls == null) {
        break missingId;
      }

      id = R.id.widget_focal_zoom;
      FocalZoomWidget widgetFocalZoom = ViewBindings.findChildViewById(rootView, id);
      if (widgetFocalZoom == null) {
        break missingId;
      }

      id = R.id.widget_focus_exposure_switch;
      FocusExposureSwitchWidget widgetFocusExposureSwitch = ViewBindings.findChildViewById(rootView, id);
      if (widgetFocusExposureSwitch == null) {
        break missingId;
      }

      id = R.id.widget_focus_mode;
      FocusModeWidget widgetFocusMode = ViewBindings.findChildViewById(rootView, id);
      if (widgetFocusMode == null) {
        break missingId;
      }

      id = R.id.widget_fpv_flight_display_widget;
      PrimaryFlightDisplayWidget widgetFpvFlightDisplayWidget = ViewBindings.findChildViewById(rootView, id);
      if (widgetFpvFlightDisplayWidget == null) {
        break missingId;
      }

      id = R.id.widget_fpv_interaction;
      FPVInteractionWidget widgetFpvInteraction = ViewBindings.findChildViewById(rootView, id);
      if (widgetFpvInteraction == null) {
        break missingId;
      }

      id = R.id.widget_horizontal_situation_indicator;
      HorizontalSituationIndicatorWidget widgetHorizontalSituationIndicator = ViewBindings.findChildViewById(rootView, id);
      if (widgetHorizontalSituationIndicator == null) {
        break missingId;
      }

      id = R.id.widget_lens_control;
      LensControlWidget widgetLensControl = ViewBindings.findChildViewById(rootView, id);
      if (widgetLensControl == null) {
        break missingId;
      }

      id = R.id.widget_map;
      MapWidget widgetMap = ViewBindings.findChildViewById(rootView, id);
      if (widgetMap == null) {
        break missingId;
      }

      id = R.id.widget_panel_system_status_list;
      SystemStatusListPanelWidget widgetPanelSystemStatusList = ViewBindings.findChildViewById(rootView, id);
      if (widgetPanelSystemStatusList == null) {
        break missingId;
      }

      id = R.id.widget_primary_fpv;
      FPVWidget widgetPrimaryFpv = ViewBindings.findChildViewById(rootView, id);
      if (widgetPrimaryFpv == null) {
        break missingId;
      }

      id = R.id.widget_remaining_flight_time;
      RemainingFlightTimeWidget widgetRemainingFlightTime = ViewBindings.findChildViewById(rootView, id);
      if (widgetRemainingFlightTime == null) {
        break missingId;
      }

      id = R.id.widget_return_to_home;
      ReturnHomeWidget widgetReturnToHome = ViewBindings.findChildViewById(rootView, id);
      if (widgetReturnToHome == null) {
        break missingId;
      }

      id = R.id.widget_secondary_fpv;
      FPVWidget widgetSecondaryFpv = ViewBindings.findChildViewById(rootView, id);
      if (widgetSecondaryFpv == null) {
        break missingId;
      }

      id = R.id.widget_simulator_control;
      SimulatorControlWidget widgetSimulatorControl = ViewBindings.findChildViewById(rootView, id);
      if (widgetSimulatorControl == null) {
        break missingId;
      }

      id = R.id.widget_take_off;
      TakeOffWidget widgetTakeOff = ViewBindings.findChildViewById(rootView, id);
      if (widgetTakeOff == null) {
        break missingId;
      }

      return new UxsdkActivityDefaultLayoutBinding((DrawerLayout) rootView, fpvHolder,
          manualRightNavSetting, panelNdviCamera, panelTopBar, panelVisualCamera, rootView_,
          settingMenuGimbalFineTune, widgetAutoExposureLock, widgetCameraControls, widgetFocalZoom,
          widgetFocusExposureSwitch, widgetFocusMode, widgetFpvFlightDisplayWidget,
          widgetFpvInteraction, widgetHorizontalSituationIndicator, widgetLensControl, widgetMap,
          widgetPanelSystemStatusList, widgetPrimaryFpv, widgetRemainingFlightTime,
          widgetReturnToHome, widgetSecondaryFpv, widgetSimulatorControl, widgetTakeOff);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
