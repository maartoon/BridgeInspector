// Generated by view binder compiler. Do not edit!
package dji.v5.ux.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import dji.v5.ux.R;
import dji.v5.ux.remotecontroller.calibration.stick.HallStickCalibrationView;
import dji.v5.ux.remotecontroller.calibration.stick.RcCalibrationRollView;
import dji.v5.ux.remotecontroller.calibration.stick.StickCalibrationView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UxsdkSettingUiRcSmartControllerStickCalibrationViewBinding implements ViewBinding {
  @NonNull
  private final StickCalibrationView rootView;

  @NonNull
  public final LinearLayout llRcPuls;

  @NonNull
  public final LinearLayout llRcSmartController;

  @NonNull
  public final HallStickCalibrationView mavicRcCalibrationLeftJoystickSquare;

  @NonNull
  public final HallStickCalibrationView mavicRcCalibrationRightJoystickSquare;

  @NonNull
  public final RcCalibrationRollView rcPlusCalibrationLeftJoystickSquare;

  @NonNull
  public final RcCalibrationRollView rcPlusCalibrationRightJoystickSquare;

  @NonNull
  public final TextView tvRcCalibrationDes;

  private UxsdkSettingUiRcSmartControllerStickCalibrationViewBinding(
      @NonNull StickCalibrationView rootView, @NonNull LinearLayout llRcPuls,
      @NonNull LinearLayout llRcSmartController,
      @NonNull HallStickCalibrationView mavicRcCalibrationLeftJoystickSquare,
      @NonNull HallStickCalibrationView mavicRcCalibrationRightJoystickSquare,
      @NonNull RcCalibrationRollView rcPlusCalibrationLeftJoystickSquare,
      @NonNull RcCalibrationRollView rcPlusCalibrationRightJoystickSquare,
      @NonNull TextView tvRcCalibrationDes) {
    this.rootView = rootView;
    this.llRcPuls = llRcPuls;
    this.llRcSmartController = llRcSmartController;
    this.mavicRcCalibrationLeftJoystickSquare = mavicRcCalibrationLeftJoystickSquare;
    this.mavicRcCalibrationRightJoystickSquare = mavicRcCalibrationRightJoystickSquare;
    this.rcPlusCalibrationLeftJoystickSquare = rcPlusCalibrationLeftJoystickSquare;
    this.rcPlusCalibrationRightJoystickSquare = rcPlusCalibrationRightJoystickSquare;
    this.tvRcCalibrationDes = tvRcCalibrationDes;
  }

  @Override
  @NonNull
  public StickCalibrationView getRoot() {
    return rootView;
  }

  @NonNull
  public static UxsdkSettingUiRcSmartControllerStickCalibrationViewBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UxsdkSettingUiRcSmartControllerStickCalibrationViewBinding inflate(
      @NonNull LayoutInflater inflater, @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.uxsdk_setting_ui_rc_smart_controller_stick_calibration_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UxsdkSettingUiRcSmartControllerStickCalibrationViewBinding bind(
      @NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ll_rc_puls;
      LinearLayout llRcPuls = ViewBindings.findChildViewById(rootView, id);
      if (llRcPuls == null) {
        break missingId;
      }

      id = R.id.ll_rc_smart_controller;
      LinearLayout llRcSmartController = ViewBindings.findChildViewById(rootView, id);
      if (llRcSmartController == null) {
        break missingId;
      }

      id = R.id.mavic_rc_calibration_left_joystick_square;
      HallStickCalibrationView mavicRcCalibrationLeftJoystickSquare = ViewBindings.findChildViewById(rootView, id);
      if (mavicRcCalibrationLeftJoystickSquare == null) {
        break missingId;
      }

      id = R.id.mavic_rc_calibration_right_joystick_square;
      HallStickCalibrationView mavicRcCalibrationRightJoystickSquare = ViewBindings.findChildViewById(rootView, id);
      if (mavicRcCalibrationRightJoystickSquare == null) {
        break missingId;
      }

      id = R.id.rc_plus_calibration_left_joystick_square;
      RcCalibrationRollView rcPlusCalibrationLeftJoystickSquare = ViewBindings.findChildViewById(rootView, id);
      if (rcPlusCalibrationLeftJoystickSquare == null) {
        break missingId;
      }

      id = R.id.rc_plus_calibration_right_joystick_square;
      RcCalibrationRollView rcPlusCalibrationRightJoystickSquare = ViewBindings.findChildViewById(rootView, id);
      if (rcPlusCalibrationRightJoystickSquare == null) {
        break missingId;
      }

      id = R.id.tv_rc_calibration_des;
      TextView tvRcCalibrationDes = ViewBindings.findChildViewById(rootView, id);
      if (tvRcCalibrationDes == null) {
        break missingId;
      }

      return new UxsdkSettingUiRcSmartControllerStickCalibrationViewBinding((StickCalibrationView) rootView,
          llRcPuls, llRcSmartController, mavicRcCalibrationLeftJoystickSquare,
          mavicRcCalibrationRightJoystickSquare, rcPlusCalibrationLeftJoystickSquare,
          rcPlusCalibrationRightJoystickSquare, tvRcCalibrationDes);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
