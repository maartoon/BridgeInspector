// Generated by view binder compiler. Do not edit!
package dji.v5.ux.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.airbnb.lottie.LottieAnimationView;
import dji.v5.ux.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UxsdkRtkGuidanceLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView rtkGuidanceClose;

  @NonNull
  public final LottieAnimationView rtkGuidanceLottieAnimation;

  @NonNull
  public final TextView rtkGuidanceLottieTip;

  @NonNull
  public final Button rtkGuidanceReplayBtn;

  @NonNull
  public final View rtkGuidanceReplayView;

  @NonNull
  public final TextView rtkGuidanceStepContent;

  @NonNull
  public final UxsdkRtkGuidanceStepImageLayoutBinding rtkGuidanceStepImage;

  @NonNull
  public final TextView rtkGuidanceStepImageDesc;

  @NonNull
  public final UxsdkRtkGuidanceStepNavigationLayoutBinding rtkGuidanceStepNavigation;

  @NonNull
  public final Button rtkGuidanceStepNext;

  @NonNull
  public final Button rtkGuidanceStepPrevious;

  @NonNull
  public final TextView rtkGuidanceStepTitle;

  private UxsdkRtkGuidanceLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView rtkGuidanceClose, @NonNull LottieAnimationView rtkGuidanceLottieAnimation,
      @NonNull TextView rtkGuidanceLottieTip, @NonNull Button rtkGuidanceReplayBtn,
      @NonNull View rtkGuidanceReplayView, @NonNull TextView rtkGuidanceStepContent,
      @NonNull UxsdkRtkGuidanceStepImageLayoutBinding rtkGuidanceStepImage,
      @NonNull TextView rtkGuidanceStepImageDesc,
      @NonNull UxsdkRtkGuidanceStepNavigationLayoutBinding rtkGuidanceStepNavigation,
      @NonNull Button rtkGuidanceStepNext, @NonNull Button rtkGuidanceStepPrevious,
      @NonNull TextView rtkGuidanceStepTitle) {
    this.rootView = rootView;
    this.rtkGuidanceClose = rtkGuidanceClose;
    this.rtkGuidanceLottieAnimation = rtkGuidanceLottieAnimation;
    this.rtkGuidanceLottieTip = rtkGuidanceLottieTip;
    this.rtkGuidanceReplayBtn = rtkGuidanceReplayBtn;
    this.rtkGuidanceReplayView = rtkGuidanceReplayView;
    this.rtkGuidanceStepContent = rtkGuidanceStepContent;
    this.rtkGuidanceStepImage = rtkGuidanceStepImage;
    this.rtkGuidanceStepImageDesc = rtkGuidanceStepImageDesc;
    this.rtkGuidanceStepNavigation = rtkGuidanceStepNavigation;
    this.rtkGuidanceStepNext = rtkGuidanceStepNext;
    this.rtkGuidanceStepPrevious = rtkGuidanceStepPrevious;
    this.rtkGuidanceStepTitle = rtkGuidanceStepTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UxsdkRtkGuidanceLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UxsdkRtkGuidanceLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.uxsdk_rtk_guidance_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UxsdkRtkGuidanceLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.rtk_guidance_close;
      ImageView rtkGuidanceClose = ViewBindings.findChildViewById(rootView, id);
      if (rtkGuidanceClose == null) {
        break missingId;
      }

      id = R.id.rtk_guidance_lottie_animation;
      LottieAnimationView rtkGuidanceLottieAnimation = ViewBindings.findChildViewById(rootView, id);
      if (rtkGuidanceLottieAnimation == null) {
        break missingId;
      }

      id = R.id.rtk_guidance_lottie_tip;
      TextView rtkGuidanceLottieTip = ViewBindings.findChildViewById(rootView, id);
      if (rtkGuidanceLottieTip == null) {
        break missingId;
      }

      id = R.id.rtk_guidance_replay_btn;
      Button rtkGuidanceReplayBtn = ViewBindings.findChildViewById(rootView, id);
      if (rtkGuidanceReplayBtn == null) {
        break missingId;
      }

      id = R.id.rtk_guidance_replay_view;
      View rtkGuidanceReplayView = ViewBindings.findChildViewById(rootView, id);
      if (rtkGuidanceReplayView == null) {
        break missingId;
      }

      id = R.id.rtk_guidance_step_content;
      TextView rtkGuidanceStepContent = ViewBindings.findChildViewById(rootView, id);
      if (rtkGuidanceStepContent == null) {
        break missingId;
      }

      id = R.id.rtk_guidance_step_image;
      View rtkGuidanceStepImage = ViewBindings.findChildViewById(rootView, id);
      if (rtkGuidanceStepImage == null) {
        break missingId;
      }
      UxsdkRtkGuidanceStepImageLayoutBinding binding_rtkGuidanceStepImage = UxsdkRtkGuidanceStepImageLayoutBinding.bind(rtkGuidanceStepImage);

      id = R.id.rtk_guidance_step_image_desc;
      TextView rtkGuidanceStepImageDesc = ViewBindings.findChildViewById(rootView, id);
      if (rtkGuidanceStepImageDesc == null) {
        break missingId;
      }

      id = R.id.rtk_guidance_step_navigation;
      View rtkGuidanceStepNavigation = ViewBindings.findChildViewById(rootView, id);
      if (rtkGuidanceStepNavigation == null) {
        break missingId;
      }
      UxsdkRtkGuidanceStepNavigationLayoutBinding binding_rtkGuidanceStepNavigation = UxsdkRtkGuidanceStepNavigationLayoutBinding.bind(rtkGuidanceStepNavigation);

      id = R.id.rtk_guidance_step_next;
      Button rtkGuidanceStepNext = ViewBindings.findChildViewById(rootView, id);
      if (rtkGuidanceStepNext == null) {
        break missingId;
      }

      id = R.id.rtk_guidance_step_previous;
      Button rtkGuidanceStepPrevious = ViewBindings.findChildViewById(rootView, id);
      if (rtkGuidanceStepPrevious == null) {
        break missingId;
      }

      id = R.id.rtk_guidance_step_title;
      TextView rtkGuidanceStepTitle = ViewBindings.findChildViewById(rootView, id);
      if (rtkGuidanceStepTitle == null) {
        break missingId;
      }

      return new UxsdkRtkGuidanceLayoutBinding((ConstraintLayout) rootView, rtkGuidanceClose,
          rtkGuidanceLottieAnimation, rtkGuidanceLottieTip, rtkGuidanceReplayBtn,
          rtkGuidanceReplayView, rtkGuidanceStepContent, binding_rtkGuidanceStepImage,
          rtkGuidanceStepImageDesc, binding_rtkGuidanceStepNavigation, rtkGuidanceStepNext,
          rtkGuidanceStepPrevious, rtkGuidanceStepTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
